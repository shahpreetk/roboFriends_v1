{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","length","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","SearchBox","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKF,GACL,2BAAIC,MCkBLK,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OAAQA,EAAOC,OAEb,iCACMD,EAAOE,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CAAMC,IACTD,EAEJT,GACIK,EAAOI,GAAGT,GAEdF,KACIO,EAAOI,GAAGX,KAEdC,MACIM,EAAOI,GAAGV,WAZxB,KADF,gDCOWY,EAVG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OAAS,yBAAMX,UAAY,OACvB,2BAAOA,UAAY,mCACnBY,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCGLI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAY,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCkBJC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CACPC,UAAS,GAHC,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIpB,OAAGG,KAAKJ,MAAMC,SACH,qDAEJG,KAAKX,MAAMK,a,GAhBFQ,aCgDbC,G,wDA1CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CACVK,YAAaD,EAAME,OAAOC,SAd9B,EAAKZ,MAAQ,CACTnB,OAAQ,GACR6B,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAK,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BASjC,IAAD,EAC0Bb,KAAKJ,MAA5BnB,EADH,EACGA,OAAO6B,EADV,EACUA,YACTQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAQxC,EAAOC,OAGP,yBAAKL,UAAY,MACb,wBAAIA,UAAY,MAAhB,iBACA,kBAAC8C,EAAD,CAAWnC,aAAgBgB,KAAKI,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAUqC,OAP5B,+C,GA3BMZ,cCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.081cd656.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return !robots.length ? \n    <h1>Robot Not Found</h1> : \n    ( <div > {\n            robots.map((user, i) => {\n                return <Card key = {\n                    i\n                }\n                id = {\n                    robots[i].id\n                }\n                name = {\n                    robots[i].name\n                }\n                email = {\n                    robots[i].email\n                }\n                />\n            })\n        } </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Searchbox = ({searchChange}) => {\n    return ( < div className = 'pa2' >\n        <input className = 'pa3 ba b--green bg-lightest-blue'\n        type = 'search'\n        placeholder = 'search robots'\n        onChange = {searchChange}/ > \n        </div>\n    )\n}\n\nexport default Searchbox","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY : 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React,{Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            hasError:false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n\n    render(){\n            if(this.state.hasError){\n                return <h1>Oops That is Not Good</h1>\n            }\n            return this.props.children\n         \n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users =>  this.setState({robots: users}))\n    }\n\n    onSearchChange = (event) => {\n        this.setState({\n            searchfield: event.target.value\n        });\n    }\n\n    render() {\n        const { robots,searchfield } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return !robots.length ?\n            <h1>Loading....</h1>\n        : ( \n                <div className = 'tc' >\n                    <h1 className = 'f2' > RoboFriends </h1>\n                    <SearchBox searchChange = {this.onSearchChange}/> \n                    <Scroll>\n                    <ErrorBoundary>\n                    <CardList robots = {filteredRobots}/>\n                    </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )   \n        }\n    }\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <App /> ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}